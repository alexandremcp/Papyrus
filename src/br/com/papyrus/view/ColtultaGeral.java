package br.com.papyrus.view;

import br.com.papyrus.model.CriarConexao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 * Esta classe cria uma consulta de visualização de todas as tabelas para dar um
 * panorama geral das informações no banco de dados
 *
 * @author Alexandre Luiz dos Santos
 * @version 1.0
 */
public class ColtultaGeral extends javax.swing.JInternalFrame {

    public ColtultaGeral() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblConsultaAutor = new javax.swing.JLabel();
        lblConsultaClassificacoes = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtContultaClassificacoes = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtContultaAutor = new javax.swing.JTable();
        lblConsultaEditoras = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtContultaEditoras = new javax.swing.JTable();
        lblConsultaLeitores = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jtContultaLeitores = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jtContultaTipos = new javax.swing.JTable();
        lblConsultaTipos = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("CONSULTA GERAL A TODAS AS TABELAS");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblConsultaAutor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblConsultaAutor.setText("Autores");
        getContentPane().add(lblConsultaAutor, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 350, 28));

        lblConsultaClassificacoes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblConsultaClassificacoes.setText("Classificações");
        getContentPane().add(lblConsultaClassificacoes, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 275, 28));

        jtContultaClassificacoes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOME"
            }
        ));
        jScrollPane3.setViewportView(jtContultaClassificacoes);
        jtContultaClassificacoes.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (jtContultaClassificacoes.getColumnModel().getColumnCount() > 0) {
            jtContultaClassificacoes.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, 275, 248));

        jtContultaAutor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOME"
            }
        ));
        jScrollPane4.setViewportView(jtContultaAutor);
        jtContultaAutor.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (jtContultaAutor.getColumnModel().getColumnCount() > 0) {
            jtContultaAutor.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 350, 248));

        lblConsultaEditoras.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblConsultaEditoras.setText("Editoras");
        getContentPane().add(lblConsultaEditoras, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 10, 540, 28));

        jtContultaEditoras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOME", "LOCALIZAÇÃO"
            }
        ));
        jScrollPane5.setViewportView(jtContultaEditoras);
        jtContultaEditoras.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (jtContultaEditoras.getColumnModel().getColumnCount() > 0) {
            jtContultaEditoras.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 40, 540, 248));

        lblConsultaLeitores.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblConsultaLeitores.setText("Leitores");
        getContentPane().add(lblConsultaLeitores, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 850, 28));

        jtContultaLeitores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOME", "NASCIMENTO", "MATRICULA", "TELEFONE", "EMAIL"
            }
        ));
        jScrollPane6.setViewportView(jtContultaLeitores);
        jtContultaLeitores.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (jtContultaLeitores.getColumnModel().getColumnCount() > 0) {
            jtContultaLeitores.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        getContentPane().add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 850, 248));

        jtContultaTipos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOME", "DIAS"
            }
        ));
        jScrollPane7.setViewportView(jtContultaTipos);
        jtContultaTipos.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (jtContultaTipos.getColumnModel().getColumnCount() > 0) {
            jtContultaTipos.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        getContentPane().add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 340, 330, 248));

        lblConsultaTipos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblConsultaTipos.setText("Tipos");
        getContentPane().add(lblConsultaTipos, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 310, 330, 28));

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**/
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        contultaAutor();
        consultaClassificacoes();
        consultaEditoras();
        consultaLeitores();
        consultaTipos();
    }//GEN-LAST:event_formInternalFrameOpened


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable jtContultaAutor;
    private javax.swing.JTable jtContultaClassificacoes;
    private javax.swing.JTable jtContultaEditoras;
    private javax.swing.JTable jtContultaLeitores;
    private javax.swing.JTable jtContultaTipos;
    private static javax.swing.JLabel lblConsultaAutor;
    private static javax.swing.JLabel lblConsultaClassificacoes;
    private static javax.swing.JLabel lblConsultaEditoras;
    private static javax.swing.JLabel lblConsultaLeitores;
    private static javax.swing.JLabel lblConsultaTipos;
    // End of variables declaration//GEN-END:variables

    private void contultaAutor() {
        try {
            Connection conn2 = CriarConexao.abrirConexao();
            String SQL2 = "SELECT COUNT(DISTINCT Id) FROM autores";
            Statement stm2 = conn2.createStatement();
            ResultSet rs2 = stm2.executeQuery(SQL2);

            if (rs2.next()) {
                int resultado = rs2.getInt(1);
                String texto = "Total de Autores: " + String.valueOf(resultado);
                lblConsultaAutor.setText(texto);
            }

            Connection conn = CriarConexao.abrirConexao();
            String SQL = "SELECT Id, Nome FROM autores ORDER BY nome";
            PreparedStatement pstm = conn.prepareStatement(SQL);
            ResultSet rs = pstm.executeQuery(SQL);
            ResultSetMetaData rsm = rs.getMetaData();

            ArrayList<Object[]> data = new ArrayList<>();
            while (rs.next()) {
                Object[] rows = new Object[rsm.getColumnCount()];
                for (int i = 0; i < rows.length; i++) {
                    rows[i] = rs.getObject(i + 1);
                }
                data.add(rows);
            }
            DefaultTableModel dtm = (DefaultTableModel) this.jtContultaAutor.getModel();
            for (int i = 0; i < data.size(); i++) {
                dtm.addRow(data.get(i));
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ColtultaGeral.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void consultaClassificacoes() {
        try {
            Connection conn2 = CriarConexao.abrirConexao();
            String SQL2 = "SELECT COUNT(DISTINCT Id) FROM classificacoes";
            Statement stm2 = conn2.createStatement();
            ResultSet rs2 = stm2.executeQuery(SQL2);

            if (rs2.next()) {
                int resultado = rs2.getInt(1);
                String texto = "Total de Classificações: " + String.valueOf(resultado);
                lblConsultaClassificacoes.setText(texto);
            }

            Connection conn = CriarConexao.abrirConexao();
            String SQL = "SELECT Id, Nome FROM classificacoes ORDER BY nome";
            PreparedStatement pstm = conn.prepareStatement(SQL);
            ResultSet rs = pstm.executeQuery(SQL);
            ResultSetMetaData rsm = rs.getMetaData();

            ArrayList<Object[]> data = new ArrayList<>();
            while (rs.next()) {
                Object[] rows = new Object[rsm.getColumnCount()];
                for (int i = 0; i < rows.length; i++) {
                    rows[i] = rs.getObject(i + 1);
                }
                data.add(rows);
            }
            DefaultTableModel dtm = (DefaultTableModel) this.jtContultaClassificacoes.getModel();
            for (int i = 0; i < data.size(); i++) {
                dtm.addRow(data.get(i));
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ColtultaGeral.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void consultaEditoras() {
        try {
            Connection conn2 = CriarConexao.abrirConexao();
            String SQL2 = "SELECT COUNT(DISTINCT Id) FROM editoras";
            Statement stm2 = conn2.createStatement();
            ResultSet rs2 = stm2.executeQuery(SQL2);

            if (rs2.next()) {
                int resultado = rs2.getInt(1);
                String texto = "Total de Editoras: " + String.valueOf(resultado);
                lblConsultaEditoras.setText(texto);
            }

            Connection conn = CriarConexao.abrirConexao();
            String SQL = "SELECT Id, Nome, Localizacao FROM editoras ORDER BY nome";
            PreparedStatement pstm = conn.prepareStatement(SQL);
            ResultSet rs = pstm.executeQuery(SQL);
            ResultSetMetaData rsm = rs.getMetaData();

            ArrayList<Object[]> data = new ArrayList<>();
            while (rs.next()) {
                Object[] rows = new Object[rsm.getColumnCount()];
                for (int i = 0; i < rows.length; i++) {
                    rows[i] = rs.getObject(i + 1);
                }
                data.add(rows);
            }
            DefaultTableModel dtm = (DefaultTableModel) this.jtContultaEditoras.getModel();
            for (int i = 0; i < data.size(); i++) {
                dtm.addRow(data.get(i));
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ColtultaGeral.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void consultaLeitores() {
        try {
            Connection conn2 = CriarConexao.abrirConexao();
            String SQL2 = "SELECT COUNT(DISTINCT Id) FROM leitores";
            Statement stm2 = conn2.createStatement();
            ResultSet rs2 = stm2.executeQuery(SQL2);

            if (rs2.next()) {
                int resultado = rs2.getInt(1);
                String texto = "Total de Leitores: " + String.valueOf(resultado);
                lblConsultaLeitores.setText(texto);
            }

            Connection conn = CriarConexao.abrirConexao();
            String SQL = "SELECT Id, Nome, Nascimento, Matricula, Telefone, Email FROM leitores ORDER BY nome";
            PreparedStatement pstm = conn.prepareStatement(SQL);
            ResultSet rs = pstm.executeQuery(SQL);
            ResultSetMetaData rsm = rs.getMetaData();

            ArrayList<Object[]> data = new ArrayList<>();
            while (rs.next()) {
                Object[] rows = new Object[rsm.getColumnCount()];
                for (int i = 0; i < rows.length; i++) {
                    rows[i] = rs.getObject(i + 1);
                }
                data.add(rows);
            }
            DefaultTableModel dtm = (DefaultTableModel) this.jtContultaLeitores.getModel();
            for (int i = 0; i < data.size(); i++) {
                dtm.addRow(data.get(i));
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ColtultaGeral.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void consultaTipos() {
        try {
            Connection conn2 = CriarConexao.abrirConexao();
            String SQL2 = "SELECT COUNT(DISTINCT Id) FROM tipos";
            Statement stm2 = conn2.createStatement();
            ResultSet rs2 = stm2.executeQuery(SQL2);

            if (rs2.next()) {
                int resultado = rs2.getInt(1);
                String texto = "Total de Tipos: " + String.valueOf(resultado);
                lblConsultaTipos.setText(texto);
            }

            Connection conn = CriarConexao.abrirConexao();
            String SQL = "SELECT Id, Nome, Dias FROM tipos ORDER BY nome";
            PreparedStatement pstm = conn.prepareStatement(SQL);
            ResultSet rs = pstm.executeQuery(SQL);
            ResultSetMetaData rsm = rs.getMetaData();

            ArrayList<Object[]> data = new ArrayList<>();
            while (rs.next()) {
                Object[] rows = new Object[rsm.getColumnCount()];
                for (int i = 0; i < rows.length; i++) {
                    rows[i] = rs.getObject(i + 1);
                }
                data.add(rows);
            }
            DefaultTableModel dtm = (DefaultTableModel) this.jtContultaTipos.getModel();
            for (int i = 0; i < data.size(); i++) {
                dtm.addRow(data.get(i));
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ColtultaGeral.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
